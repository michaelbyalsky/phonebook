{"version":3,"sources":["components/Person.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Note","person","handleDelete","className","name","number","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObject","post","delete","id","App","useState","phonebook","setPhonebook","newPerson","setNewPerson","newPhoneNumber","setPhoneNumber","errorMessage","useEffect","phonebookService","res","returnedNote","map","i","Person","key","onSubmit","event","preventDefault","noteObject","console","log","concat","value","placeholder","onChange","target","required","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"mNAYeA,EAVF,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aAEtB,OACE,wBAAIC,UAAU,UACZ,8BAAOF,EAAOG,MAAY,yCAAWH,EAAOI,SAC5C,4BAAQC,QAAS,kBAAMJ,EAAaD,KAApC,YCOSM,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKL,UAAU,SACZK,I,gBCRDC,EAAU,eAsBD,EApBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB5B,EAfA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EALM,SAACb,GAEpB,OADgBS,IAAMO,OAAN,UAAgBR,EAAhB,YAA2BR,EAAOiB,KACnCN,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC6D5BK,EA5EH,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACTC,EADS,KACEC,EADF,OAEkBF,mBAAS,IAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGyBJ,mBAAS,IAHlC,mBAGTK,EAHS,KAGOC,EAHP,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,UAMhBC,qBAAU,WACRC,IAEGjB,MAAK,SAAAkB,GACJR,EAAaQ,QAEhB,IAEH,IAwBM5B,EAAe,SAACD,GACpB4B,EACc5B,GACbW,MAAK,SAAAmB,GAAY,OAAIT,EAAaS,OAGrC,OACE,6BACE,uCACA,kBAAC,EAAD,CAAcvB,QAASmB,IACvB,4BACGN,EAAUW,KAAI,SAAC/B,EAAQgC,GAAT,OACb,kBAACC,EAAD,CACEC,IAAKF,EACLhC,OAAQA,EACRC,aAAcA,QAIpB,0BAAMkC,SA3CQ,SAACC,GACjBA,EAAMC,iBACN,IAAMC,EAAa,CACjBnC,KAAMmB,EACNlB,OAAQoB,GAEVe,QAAQC,IAAIF,GAEZV,EACUU,GACP3B,MAAK,SAAAmB,GACJT,EAAaD,EAAUqB,OAAOX,IAC9BP,EAAa,SAgCb,2BACEmB,MAAOpB,EACPqB,YAAa,mBACbC,SA/BmB,SAACR,GAC1Bb,EAAaa,EAAMS,OAAOH,QA+BpBI,UAAQ,IAET,2BACCJ,MAAOlB,EACPmB,YAAa,0BACbC,SAjCwB,SAACR,GAC/BX,EAAeW,EAAMS,OAAOH,QAiCtBI,UAAQ,IAEV,4BAAQC,KAAK,UAAb,WC/DYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMzD,c","file":"static/js/main.b02b0539.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ person, handleDelete }) => {\r\n\r\n  return (\r\n    <li className='person'>\r\n      <span>{person.name}</span><span>{`-${person.number}`}</span> \r\n      <button onClick={() => handleDelete(person)}>Delete</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (person) => {\r\n  const request = axios.delete(`${baseUrl}/${person.id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deletePerson }","import React, { useState, useEffect } from 'react'\nimport Person from './components/Person'\nimport Notification from './components/Notification'\nimport phonebookService from './services/persons'\n\nconst App = () => {\n  const [phonebook, setPhonebook] = useState([]) \n  const [newPerson, setNewPerson] = useState('')\n  const [newPhoneNumber, setPhoneNumber] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    phonebookService\n      .getAll()\n      .then(res => {\n        setPhonebook(res)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      name: newPerson,\n      number: newPhoneNumber\n    }\n    console.log(noteObject);\n  \n    phonebookService\n      .create(noteObject)\n      .then(returnedNote => {\n        setPhonebook(phonebook.concat(returnedNote))\n        setNewPerson('')\n      })\n  }\n\n  const handlePersonChange = (event) => {\n    setNewPerson(event.target.value)\n  }\n\n  const handlePhoneNumberChange = (event) => {\n    setPhoneNumber(event.target.value)\n  }\n\n  const handleDelete = (person) => {\n    phonebookService\n    .deletePerson(person)\n    .then(returnedNote => setPhonebook(returnedNote))\n  }\n\n  return (\n    <div>\n      <h1>Persons</h1>\n      <Notification message={errorMessage} />\n      <ul>\n        {phonebook.map((person, i) => \n          <Person\n            key={i}\n            person={person} \n            handleDelete={handleDelete}\n          />\n        )}\n      </ul>\n      <form onSubmit={addPerson}>\n        <input\n          value={newPerson}\n          placeholder={'Type new name...'}\n          onChange={handlePersonChange}\n          required\n        />\n         <input\n          value={newPhoneNumber}\n          placeholder={'Type new phoneNumber...'}\n          onChange={handlePhoneNumberChange}\n          required\n        />\n        <button type=\"submit\">save</button>\n      </form>   \n    </div>\n  )\n}\n\nexport default App ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}